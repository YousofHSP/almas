@page "/Admin/Insurers"
@using System.Net.Http.Headers
@layout AdminLayout
@inject IAdminService<Insurer, InsurerDto, InsurerResDto> Service
@inject SweetAlertService Swal

@if (Insurers is null || IsLoading)
{
    <DisplaySpinner/>
}
else
{
    <div class="overflow-x-auto px-12">
        <a href="/Admin/Insurers/Create" class="btn btn-outline mb-10">
            <span>
                <PlusIcon class="h-5 w-5"/>
            </span>
            <span>ایجاد</span>
        </a>
        <table class="table">
            <!-- head -->
            <thead>
            <tr>
                <th>@(ModelExtensions.ToDisplay<InsurerResDto>(s => s.Title))</th>
                <th>@(ModelExtensions.ToDisplay<InsurerResDto>(s => s.Description))</th>
                <th>@(ModelExtensions.ToDisplay<InsurerResDto>(s => s.UserFullName))</th>
                <th></th>
            </tr>
            </thead>
            <tbody>
            @foreach (var insurer in Insurers)
            {
                <tr>
                    <InsurerTrItem Insurer="insurer" OnDelete="@(async (args) => await Delete(args))"/>
                </tr>
            }
            </tbody>

        </table>
    </div>
}

@code {

    [Parameter]
    public bool IsLoading { get; set; } = false;

    [Parameter]
    public List<InsurerResDto>? Insurers { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Insurers = await Service.Get();
    }

    private async Task Delete(int id)
    {
        await Swal.FireAsync("موفیت", "آیتم با موفقیت حذف شد", "success");
        Insurers = Insurers!.Where(s => !s.Id.Equals(id)).ToList();
    }

}