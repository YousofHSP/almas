@page "/Admin/Courses/{Id:int}"
@using Entities
@using Common.Utilities
@layout AdminLayout
@inject IAdminService<Course, CourseDto, CourseResDto> Service
@inject NavigationManager NavigationManager
@inject IAdminUserService UserService
@inject SweetAlertService Swal

@if (_course is null || _users is null)
{
    <DisplaySpinner/>
}
else
{
    <EditForm Model="@_course" OnValidSubmit="@Submit">
        <DataAnnotationsValidator/>
        <ValidationSummary class="text-error"/>
        <div class="card w-1/2">
            <div class="card-body">
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">@(ModelExtensions.ToDisplay<CourseDto>(c => c.Title))</span>
                    </label>
                    <InputText id="title" class="input input-bordered" @bind-Value="_course!.Title"></InputText>
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">@(ModelExtensions.ToDisplay<CourseDto>(c => c.Price))</span>
                    </label>
                    <InputNumber id="price" class="input input-bordered" @bind-Value="_course!.Price"></InputNumber>
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">@(ModelExtensions.ToDisplay<CourseDto>(c => c.Status))</span>
                    </label>
                    <InputSelect id="status" class="input input-bordered" @bind-Value="_course!.Status">
                        <option value="@CourseStatus.OnPerforming">@CourseStatus.OnPerforming.ToDisplay()</option>
                        <option value="@CourseStatus.Completed">@CourseStatus.Completed.ToDisplay()</option>
                        <option value="@CourseStatus.Disable">@CourseStatus.Disable.ToDisplay()</option>
                    </InputSelect>
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">@(ModelExtensions.ToDisplay<CourseDto>(c => c.UserId))</span>
                    </label>
                    <InputSelect id="userId" class="input input-bordered" @bind-Value="_course!.UserId">
                        @foreach (var user in _users)
                        {
                            <option value="@user.Id">@user.FullName (@user.UserName)</option>
                        }
                    </InputSelect>
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">توضیحات</span>
                    </label>
                    <InputTextArea id="description" class="textarea textarea-bordered" @bind-Value="_course!.Description"></InputTextArea>
                </div>
                <button class="btn btn-outline" type="submit">ثبت</button>
            </div>
        </div>
    </EditForm> 
}

@code {
    private CourseDto? _course;
    private IEnumerable<UserResDto>? _users;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _users = await UserService.Get();
        var course = await Service.Get(Id);
        if (course is not null)
            _course = new CourseDto()
            {
                Id = course.Id,
                Title = course.Title,
                Description = course.Description,
                Price = course.Price,
                Status = course.Status,
                UserId = course.UserId
            };
    }

    private async Task Submit()
    {
        if(_course is null) return;
        var response = await Service.Update(_course.Id, _course);
        if (response is null) return;
        await Swal.FireAsync("موقیت", "آیتم با موفیت ثبت شد", "success");
        NavigationManager.NavigateTo("/Admin/Courses");
    }

}