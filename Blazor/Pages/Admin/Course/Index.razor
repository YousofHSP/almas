@page "/Admin/Courses"
@layout AdminLayout
@inject IAdminService<Course, CourseDto, CourseResDto> Service
@inject SweetAlertService Swal

@if (Courses is null)
{
    <DisplaySpinner />
}
else
{
    <div class="overflow-x-auto px-12">
        <a href="/Admin/Courses/Create" class="btn btn-outline mb-10">
            <span><PlusIcon class="h-5 w-5"/></span>
            <span>ایجاد</span>
        </a>
        <table class="table">
            <!-- head -->
            <thead>
            <tr>
                <th>@(ModelExtensions.ToDisplay<CourseResDto>(c => c.Title))</th>
                <th>@(ModelExtensions.ToDisplay<CourseResDto>(c => c.Status))</th>
                <th>@(ModelExtensions.ToDisplay<CourseResDto>(c => c.Price))</th>
                <th>@(ModelExtensions.ToDisplay<CourseResDto>(c => c.Description))</th>
                <th>@(ModelExtensions.ToDisplay<CourseResDto>(c => c.UserFullName))</th>
                <th></th>
            </tr>
            </thead>
            <tbody>
            @foreach (var course in Courses)
            {
                <tr>
                    <CourseTrItem OnDelete="@(async(args) => await DeleteHandler(args))" Course="course"/>
                </tr>
            }
            </tbody>

        </table>
    </div>
}

@code {
    private IEnumerable<CourseResDto>? Courses { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Courses = await Service.Get();
    }

    async Task DeleteHandler(int id)
    {
        await Swal.FireAsync("موفیت", "آیتم با موفقیت حذف شد", "success");
        Courses = Courses!.Where(c => !c.Id.Equals(id));
    }

}